pragma solidity ^0.8.6;

import "./lib/BytesLib.sol";

interface IERC20 {  
    function balanceOf(address account) external view returns(uint256);
    function approve(address spender, uint256 amount) external;
    function transferFrom(address sender, address recipient, uint256 amount) external;
    function transfer(address recipient, uint256 amount) external;
}

interface IProxy {
    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;
}

interface ILendingPoolProxy { 
    function depositETH(
        address lendingPool,  
        address onBehalfOf,   
        uint16 referralCode) external;
}

/**
 * @title PolygonGrantsHackthon sample 2. 
 * @notice This contract invokes Furucombo proxy to achieve collateral 
 *         swap by Aave flashloan.
 * 
 */
contract Sample2 {
   
   /*   
    * Furucombo proxy: 0x125d2E4a83bBba4e6f51a244c494f9A1958D20BB
    * Aave WETHGateway: 0xbEadf48d62aCC944a06EEaE0A9054A90E5A7dc97
    * Aave lending pool: 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf
    * WMatic: 0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270
    * DAI: 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063
    * amWMmatic:0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4
    * amDAI: 0x27F8D03b3a2196956ED754baDc28D73be8830A6e
    *
    */
   
    using BytesLib for bytes;

    address public constant HFUNDS = 0x3B3f747aC68750Eb936e9116141b79358579DE84;                                    
    address public constant HAAVEV2 = 0xD4E8f7FfDF98F7C170A48A31d2f6d358829878Af;
    address public constant amWMATIC = 0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4;
    address public constant DAI = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;

    IProxy public furucomboProxy;
    
    constructor() {
        furucomboProxy = IProxy(0x125d2E4a83bBba4e6f51a244c494f9A1958D20BB);
    }

    function exec() external payable{
        // setup tos
        address[] memory tos = getTos();
        
        // setup configs
        bytes32[] memory configs = getConfigs();

        // setup datas
        bytes[] memory datas = getDatas();

        // transfer amWMATIC to this contract
        IERC20(amWMATIC).transferFrom(
                msg.sender,
                address(this),
                3000 ether // 3000 amWMATIC
            );
            
        // approve furucombo proxy to use amWMATIC   
        IERC20(amWMATIC).approve(
                address(furucomboProxy),
                3000 ether // 3000 amWMATIC
            );


        try furucomboProxy.batchExec(tos, configs, datas) {

        } catch Error(string memory reason) {
            revert(reason);
        } catch {
            revert("fail...!");
        }
        
        // return DAI to user
        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));
        IERC20(DAI).transfer(msg.sender, daiBalance);
        
    }

    function getTos() private pure returns (address[] memory){
        address[] memory tos = new address[](1);
        tos[0] = HAAVEV2;
        // tos[1] = HFUNDS;
        return tos;
    }

    function getConfigs() private pure returns (bytes32[] memory){
        bytes32[] memory r = new bytes32[](1);
        r[0] = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
        // r[1] = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
        return r;
    }
    
    function getDatas() private view returns (bytes[] memory){
        bytes[] memory result = new bytes[](1);

        bytes memory firstHandlerDatas1 = hex"54296154000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000D4E8f7FfDF98F7C170A48A31d2f6d358829878Af0000000000000000000000003B3f747aC68750Eb936e9116141b79358579DE840000000000000000000000003B3f747aC68750Eb936e9116141b79358579DE84000000000000000000000000D4E8f7FfDF98F7C170A48A31d2f6d358829878Af0000000000000000000000006107114BDf5691ADEE675Ea6E9f09d34c6338cc4000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000100ffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000004447e7ef240000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006418248f2a00000000000000000000000027f8d03b3a2196956ed754badc28d73be8830a6e00000000000000000000000000000000000000000000003635c9adc5dea00000";
        bytes memory firstHandlerDatas2 = hex"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4d0797f840000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008df3aad3a84da6b69a4da8aec3ea40d9091b2ac400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000a2a15d09519be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f14210a60000000000000000000000000000000000000000000000a2a15d09519be000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4d0241dac0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000000000000000000000000000000000000";
        bytes memory userAddress = abi.encode(msg.sender);
        
        // bytes memory secondHandlerDatas = hex"db71410e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000040000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a06300000000000000000000000027f8d03b3a2196956ed754badc28d73be8830a6e0000000000000000000000008df3aad3a84da6b69a4da8aec3ea40d9091b2ac4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000701e75adf11ee7d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        
        result[0] = firstHandlerDatas1.concat(userAddress).concat(firstHandlerDatas2);
        // result[1] = secondHandlerDatas;
        return result;
    }

}
